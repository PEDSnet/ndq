[{"path":"https://pedsnet.github.io/ndq/articles/database_connection.html","id":"connecting-to-your-cdm","dir":"Articles","previous_headings":"","what":"Connecting to your CDM","title":"Database Connection & Environment Setup","text":"primary configuration argos required establish database connection config('db_src'). can set environment variable one two ways:","code":""},{"path":"https://pedsnet.github.io/ndq/articles/database_connection.html","id":"option-1-dbi-or-similar","dir":"Articles","previous_headings":"Connecting to your CDM","what":"Option 1: DBI (or similar)","title":"Database Connection & Environment Setup","text":"One option create connection object inside R session using DBI similar database connection package. Instructions use DBI::dbConnect establish connection can found DBI package documentation. option used, can set environment variable config('db_src', myDBIobject)","code":""},{"path":"https://pedsnet.github.io/ndq/articles/database_connection.html","id":"option-2-external-json-configuration","dir":"Articles","previous_headings":"Connecting to your CDM","what":"Option 2: External JSON Configuration","title":"Database Connection & Environment Setup","text":"Another option store configuration details local JSON file feed path file srcr. provided simple example . Option 1, type information included file differs different database backends. option used, can set environment variable config('db_src', srcr('path///file'))","code":"{     \"src_name\" : \"Postgres\",     \"src_args\" : {             \"host\"     : \"my.database.server\",             \"port\"     : 5432,             \"dbname\"   : \"project_db\",             \"username\" : \"my_username\",             \"password\" : \"my_password\",             \"options\"  : \"-c search_path=my_cdm_schema\"      },      \"post_connect_sql\" : [          \"set role project_staff;\"      ]       }"},{"path":"https://pedsnet.github.io/ndq/articles/database_connection.html","id":"custom-configuration","dir":"Articles","previous_headings":"","what":"Custom Configuration","title":"Database Connection & Environment Setup","text":"NDQ package also utilizes custom environment variable, config('qry_site'), required package argos whole. set name institution executing function(s), like config('qry_site', 'my_institution'). configuration ensure , applicable, information one institution read execution check_* function. done improve performance reduce amount data processed . like execute functions multiple institutions, simply change variable another institution re-execute analysis. process_* functions can used compute overall information based combined results execution.","code":""},{"path":"https://pedsnet.github.io/ndq/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hanieh Razzaghi. Author. Kimberley Dickinson. Author. Kaleigh Wieand. Author, maintainer. Charles Bailey. Author.","code":""},{"path":"https://pedsnet.github.io/ndq/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Razzaghi H, Dickinson K, Wieand K, Bailey C (2025). ndq: Network Data Quality (NDQ). R package version 0.0.0.9000, https://github.com/PEDSnet/ndq.","code":"@Manual{,   title = {ndq: Network Data Quality (NDQ)},   author = {Hanieh Razzaghi and Kimberley Dickinson and Kaleigh Wieand and Charles Bailey},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/PEDSnet/ndq}, }"},{"path":"https://pedsnet.github.io/ndq/index.html","id":"network-data-quality-ndq","dir":"","previous_headings":"","what":"Network Data Quality (NDQ)","title":"Network Data Quality (NDQ)","text":"Network Data Quality (NDQ) package contains several data quality modules intended evaluate overall condition data clinical research network. modules, cover broad range data quality domains conformance plausibility, flexible can configured execute checks specific desired use cases OMOP PCORnet common data models (CDMs).","code":""},{"path":"https://pedsnet.github.io/ndq/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Network Data Quality (NDQ)","text":"can install development version package GitHub:","code":"remotes::install_github('PEDSnet/ndq')"},{"path":"https://pedsnet.github.io/ndq/index.html","id":"current-functionality","dir":"","previous_headings":"","what":"Current Functionality","title":"Network Data Quality (NDQ)","text":"package currently (09/2025) contains 10 distinct analysis types can configured run innumerable data quality checks. See table list current offerings.","code":""},{"path":"https://pedsnet.github.io/ndq/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example Usage","title":"Network Data Quality (NDQ)","text":"see sample repository functions executed, see PEDSnet NDQ.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/add_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"add check name, db version, and site name to a given table — add_meta","title":"add check name, db version, and site name to a given table — add_meta","text":"add check name, db version, site name given table","code":""},{"path":"https://pedsnet.github.io/ndq/reference/add_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"add check name, db version, and site name to a given table — add_meta","text":"","code":"add_meta(   tbl_meta,   check_lib,   version = config(\"current_version\"),   site_nm = config(\"qry_site\") )"},{"path":"https://pedsnet.github.io/ndq/reference/add_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"add check name, db version, and site name to a given table — add_meta","text":"tbl_meta table add meta information check_lib name check version version database; defaults config('current_version'); site_nm name site; defaults config('site')","code":""},{"path":"https://pedsnet.github.io/ndq/reference/attach_anon_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Add anonymized site identifier to all tables — attach_anon_id","title":"Add anonymized site identifier to all tables — attach_anon_id","text":"Add anonymized site identifier tables","code":""},{"path":"https://pedsnet.github.io/ndq/reference/attach_anon_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add anonymized site identifier to all tables — attach_anon_id","text":"","code":"attach_anon_id(all_sites_tbl, tbls_to_anon)"},{"path":"https://pedsnet.github.io/ndq/reference/attach_anon_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add anonymized site identifier to all tables — attach_anon_id","text":"all_sites_tbl tbl contains column called site sites want mask tables tbls_to_anon NAMED list tables want add masked site identifier column ","code":""},{"path":"https://pedsnet.github.io/ndq/reference/attach_anon_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add anonymized site identifier to all tables — attach_anon_id","text":"original tables tbls_to_anon original columns plus column called site_anon masked identifier consistent across tables tbls_to_anon","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_assign.html","id":null,"dir":"Reference","previous_headings":"","what":"assign ","title":"assign ","text":"assign \"best\" \"best\" labels concepts","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_assign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"assign ","text":"","code":"bmc_assign(bmc_output, conceptset)"},{"path":"https://pedsnet.github.io/ndq/reference/bmc_assign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"assign ","text":"bmc_output bmc_counts output check_bmc conceptset bmc_concepts output check_bmc additional column called \"include\" added \"best\" unideal concepts marked 0","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_assign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"assign ","text":"dataframe include designations attached concepts; also checks ensure additional values present","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Mapped Concepts Input File (OMOP) — bmc_input_omop","title":"Best Mapped Concepts Input File (OMOP) — bmc_input_omop","text":"sample version OMOP compliant input file Best Mapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Mapped Concepts Input File (OMOP) — bmc_input_omop","text":"","code":"bmc_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_omop.html","id":"bmc-input-omop","dir":"Reference","previous_headings":"","what":"bmc_input_omop","title":"Best Mapped Concepts Input File (OMOP) — bmc_input_omop","text":"dataframe CSV file 7 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field *_concept_id field concepts make valueset (ex: drug_concept_id, drug_source_concept_id) concept_table_field OPTIONAL field OMOP's vocabulary concept table used identify concept_ids concept_field (.e. concept_name, concept_class_id); needed concept_tbl NULL filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Mapped Concepts Input File (PCORnet) — bmc_input_pcornet","title":"Best Mapped Concepts Input File (PCORnet) — bmc_input_pcornet","text":"sample version PCORnet compliant input file Best Mapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Mapped Concepts Input File (PCORnet) — bmc_input_pcornet","text":"","code":"bmc_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/bmc_input_pcornet.html","id":"bmc-input-pcornet","dir":"Reference","previous_headings":"","what":"bmc_input_pcornet","title":"Best Mapped Concepts Input File (PCORnet) — bmc_input_pcornet","text":"dataframe CSV file 7 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field field concept codes make valueset (ex: rxnorm_cui, dx) concept_table_field OPTIONAL field OHDSI's vocabulary concept table used identify concept_ids concept_field (.e. concept_name, concept_class_id); needed concept_tbl NULL filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed procedures)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_rollup.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to compute proportion of ","title":"Function to compute proportion of ","text":"Function compute proportion \"best\" based output bmc check","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_rollup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to compute proportion of ","text":"","code":"bmc_rollup(bmc_output_pp)"},{"path":"https://pedsnet.github.io/ndq/reference/bmc_rollup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to compute proportion of ","text":"bmc_output_pp table output bmc_assign function, columns output bmc check + indicator column whether concept \"best\" category","code":""},{"path":"https://pedsnet.github.io/ndq/reference/bmc_rollup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to compute proportion of ","text":"table cols: site, check_type, database_version, check_name, check_desc,  count_best, include, total_rows, total_pts, best_row_prop, best_pts_prop","code":""},{"path":"https://pedsnet.github.io/ndq/reference/calc_days_between_dates.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","title":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","text":"Function get sql code number days date1 date2. Adapted sql dialects Postgres MS SQL.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/calc_days_between_dates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","text":"","code":"calc_days_between_dates(date_col_1, date_col_2, db = config(\"db_src\"))"},{"path":"https://pedsnet.github.io/ndq/reference/calc_days_between_dates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","text":"date_col_1 Date col 1 date_col_2 Date col 2 db connection type object. Defaulted config('db_src') standard framework Functionality added Postgres, MS SQL Snowflake","code":""},{"path":"https://pedsnet.github.io/ndq/reference/calc_days_between_dates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","text":"integer representing difference (days) two provided dates","code":""},{"path":"https://pedsnet.github.io/ndq/reference/calc_days_between_dates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Date Differences in Multiple SQL Backends — calc_days_between_dates","text":"always wrapped sql()","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation Input File (OMOP) — cfd_input_omop","title":"Clinical Fact Documentation Input File (OMOP) — cfd_input_omop","text":"sample version OMOP compliant input file Clinical Fact Documentation data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation Input File (OMOP) — cfd_input_omop","text":"","code":"cfd_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_omop.html","id":"cfd-input-omop","dir":"Reference","previous_headings":"","what":"cfd_input_omop","title":"Clinical Fact Documentation Input File (OMOP) — cfd_input_omop","text":"dataframe CSV file 5 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation Input File (PCORnet) — cfd_input_pcornet","title":"Clinical Fact Documentation Input File (PCORnet) — cfd_input_pcornet","text":"sample version PCORnet compliant input file Clinical Fact Documentation data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation Input File (PCORnet) — cfd_input_pcornet","text":"","code":"cfd_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/cfd_input_pcornet.html","id":"cfd-input-pcornet","dir":"Reference","previous_headings":"","what":"cfd_input_pcornet","title":"Clinical Fact Documentation Input File (PCORnet) — cfd_input_pcornet","text":"dataframe CSV file 5 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed procedures)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation Visit Type Input File (OMOP) — cfd_visit_types_omop","title":"Clinical Fact Documentation Visit Type Input File (OMOP) — cfd_visit_types_omop","text":"sample version OMOP compliant input file defining visit types Clinical Fact Documentation data quality module. Multiple rows included multiple concepts associated single visit type. name second column control visit filtering takes place, can filter columns visit_tbl need (.e. visit_source_concept_id)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation Visit Type Input File (OMOP) — cfd_visit_types_omop","text":"","code":"cfd_visit_types_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_omop.html","id":"cfd-visit-types-omop","dir":"Reference","previous_headings":"","what":"cfd_visit_types_omop","title":"Clinical Fact Documentation Visit Type Input File (OMOP) — cfd_visit_types_omop","text":"dataframe CSV file 2 columns visit_type string identify visit type interest (ex: inpatient) visit_concept_id visit_concept_id associated visit type interest (ex: 9202)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation Visit Type Input File (PCORnet) — cfd_visit_types_pcornet","title":"Clinical Fact Documentation Visit Type Input File (PCORnet) — cfd_visit_types_pcornet","text":"sample version PCORnet compliant input file defining visit types Clinical Fact Documentation data quality module. Multiple rows included multiple concepts associated single visit type. name second column control visit filtering takes place, can filter columns visit_tbl need ","code":""},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation Visit Type Input File (PCORnet) — cfd_visit_types_pcornet","text":"","code":"cfd_visit_types_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/cfd_visit_types_pcornet.html","id":"cfd-visit-types-pcornet","dir":"Reference","previous_headings":"","what":"cfd_visit_types_pcornet","title":"Clinical Fact Documentation Visit Type Input File (PCORnet) — cfd_visit_types_pcornet","text":"dataframe CSV file 2 columns visit_type string identify visit type interest (ex: inpatient) enc_type enc_type associated visit type interest (ex: 9202)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_bmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Mapped Concepts — check_bmc","title":"Best Mapped Concepts — check_bmc","text":"function identify existing concepts within specified field user can assess concepts acceptable (\"best\") used field (\"best\")","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_bmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Mapped Concepts — check_bmc","text":"","code":"check_bmc(   bmc_tbl,   omop_or_pcornet = \"omop\",   concept_tbl = vocabulary_tbl(\"concept\"),   check_string = \"bmc\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_bmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Best Mapped Concepts — check_bmc","text":"bmc_tbl table information regarding fields evaluated determine include \"best\" concepts; see ?bmc_input_omop ?bmc_input_pcornet details omop_or_pcornet string indicating CDM format data; defaults omop concept_tbl vocabulary table concept information; defaults vocabulary.concept   check_string string contains description table","code":"if you do not have the OMOP vocabulary tables or would not like to use them, set this                argument to NULL"},{"path":"https://pedsnet.github.io/ndq/reference/check_bmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Best Mapped Concepts — check_bmc","text":"list two dataframes: bmc_counts: concept present specified field associated row patient counts/proportions bmc_concepts: just concepts bmc_counts – labelled \"best\" (1) vs \"best\" (0) concepts column called include use processing step","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_bmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Best Mapped Concepts — check_bmc","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::bmc_input_omop #> # A tibble: 4 × 7 #>   check_id  check_description schema table     concept_field concept_table_field #>   <chr>     <chr>             <chr>  <chr>     <chr>         <chr>               #> 1 rxnorm_di inpatient admin   cdm    drug_exp… drug_concept… concept_class_id    #> 2 rxnorm_dp prescriptions     cdm    drug_exp… drug_concept… concept_class_id    #> 3 race      race              cdm    person    race_concept… concept_name        #> 4 ethnicity ethnicity         cdm    person    ethnicity_co… concept_name        #> # ℹ 1 more variable: filter_logic <chr> ndq::bmc_input_pcornet #> # A tibble: 4 × 7 #>   check_id  check_description schema table     concept_field concept_table_field #>   <chr>     <chr>             <chr>  <chr>     <chr>         <chr>               #> 1 rxnorm_di inpatient admin   cdm    med_admin medadmin_code concept_class_id    #> 2 rxnorm_dp prescriptions     cdm    prescrib… rxnorm_cui    concept_class_id    #> 3 race      race              cdm    demograp… race          concept_name        #> 4 ethnicity ethnicity         cdm    demograp… hispanic      concept_name        #> # ℹ 1 more variable: filter_logic <lgl>  # Use this as your input to the BMC function if (FALSE) { # \\dontrun{ my_bmc_rslt <- check_bmc(bmc_tbl = ndq::bmc_input_omop,                          omop_or_pcornet = 'omop',                          concept_tbl = vocabulary_tbl(\"concept\"), ## points to OHDSI concept table                          check_string = 'bmc') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_cfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation — check_cfd","title":"Clinical Fact Documentation — check_cfd","text":"function identify visits link least one occurrence user-specified clinical facts. also compute counts patients associated visits.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_cfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation — check_cfd","text":"","code":"check_cfd(   cfd_tbl,   visit_type_filter,   visit_type_tbl,   omop_or_pcornet = \"omop\",   visit_tbl = cdm_tbl(\"visit_occurrence\"),   check_string = \"cfd\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_cfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Fact Documentation — check_cfd","text":"cfd_tbl tabular input || required primary input table contains descriptive information checks executed function. include definitions clinical fact types evaluated visit_tbl. see ?cfd_input_omop ?cfd_input_pcornet examples input structure visit_type_filter string / vector || required string vector strings specifies visit type(s) function limit analysis (.e. inpatient, c(inpatient, outpatient)). included visit type, available visit types pulled visit_tbl (just defined visit_type_tbl) capture full array visits. visit_type_tbl tabular input || required table mappings link visit_concept_ids / enc_types broader string descriptor (.e. inpatient). Multiple rows included multiple IDs mapped string label. omop_or_pcornet string || defaults omop string, either omop pcornet, indicating CDM format data visit_tbl tabular input || defaults cdm_tbl('visit_occurrence') CDM table visits used analysis. Typically, either OMOP visit_occurrence PCORnet encounter table check_string string || defaults cfd abbreviated identifier used label output module","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_cfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Fact Documentation — check_cfd","text":"summary table , provided clinical fact visit type combination, include count proportion visits linked least one occurrence fact type interest. also include count proportion patients associated visits.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_cfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinical Fact Documentation — check_cfd","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::cfd_input_omop #> # A tibble: 3 × 5 #>   check_id check_description schema table                filter_logic #>   <chr>    <chr>             <chr>  <chr>                <lgl>        #> 1 pr       procedures        cdm    procedure_occurrence NA           #> 2 co       conditions        cdm    condition_occurrence NA           #> 3 dr       drugs             cdm    drug_exposure        NA           ndq::cfd_input_pcornet #> # A tibble: 4 × 5 #>   check_id check_description         schema table       filter_logic #>   <chr>    <chr>                     <chr>  <chr>       <lgl>        #> 1 pr       procedures                cdm    procedures  NA           #> 2 co       diagnoses                 cdm    diagnosis   NA           #> 3 rx       prescriptions             cdm    prescribing NA           #> 4 admin    inpatient administrations cdm    med_admin   NA            # Next define the visit types to be examined # You can access examples for both OMOP & PCORnet here: ndq::cfd_visit_types_omop #> # A tibble: 6 × 2 #>   visit_type visit_concept_id #>   <chr>                 <dbl> #> 1 inpatient              9201 #> 2 inpatient        2000000048 #> 3 outpatient             9202 #> 4 outpatient           581399 #> 5 emergency              9203 #> 6 emergency        2000000048 ndq::cfd_visit_types_pcornet #> # A tibble: 6 × 2 #>   visit_type enc_type #>   <chr>      <chr>    #> 1 inpatient  IP       #> 2 inpatient  EI       #> 3 outpatient AV       #> 4 outpatient TH       #> 5 emergency  ED       #> 6 emergency  EI        # Use this as your input to the CFD function if (FALSE) { # \\dontrun{ my_cfd_rslt <- check_cfd(cfd_tbl = ndq::cfd_input_omop,                          visit_type_tbl = ndq::cfd_visit_types_omop,                          visit_type_filter = c('inpatient', 'outpatient'),                          omop_or_pcornet = 'omop',                          visit_tbl = cdm_tbl('visit_occurrence'),                          check_string = 'cfd') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_dc.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Cycle Changes — check_dc","title":"Data Cycle Changes — check_dc","text":"function compute row & patient counts specified tables current data model version previous data model version order assess changes across data extractions. previously executed function, option point previous result set instead recomputing counts CDM.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Cycle Changes — check_dc","text":"","code":"check_dc(   dc_tbl,   omop_or_pcornet = \"omop\",   prev_db_string = \"v1\",   current_db_string = \"v2\",   prev_ct_src = \"cdm\",   prev_db = config(\"db_src\"),   prev_rslt_tbl = \"dc_output\",   prev_rslt_schema = config(\"results_schema\"),   check_string = \"dc\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_dc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Cycle Changes — check_dc","text":"dc_tbl table details CDM elements tested current previous data model versions. see ?dc_input_omop ?dc_input_pcornet details omop_or_pcornet string indicating CDM format data; defaults omop prev_db_string string label indicating previous CDM version; prev_ct_src == 'result', ensure matches appropriate database label last set results current_db_string string label indicating current CDM version prev_ct_src string indicating counts previous data model extracted: either cdm (pull previous CDM instance) result (pull previous instance check_dc output) prev_db database connection used access previous CDM result table(s); defaults config('db_src') prev_rslt_tbl prev_ct_src = 'result', name table previous results stored prev_rslt_schema prev_ct_src = 'result', name schema previous results stored. defaults config('results_schema') check_string abbreviated identifier identify output module defaults dc","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Cycle Changes — check_dc","text":"list two dataframes: - dc_cts: dataframe containing row (applicable) person counts table - dc_meta: metadata associated input table appears dc_cts","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Cycle Changes — check_dc","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::dc_input_omop #> # A tibble: 26 × 8 #>    schema_current table_current schema_prev table_prev filter_logic check_domain #>    <chr>          <chr>         <chr>       <chr>      <chr>        <chr>        #>  1 cdm            person        cdm         person     NA           person       #>  2 cdm            drug_exposure cdm         drug_expo… NA           drug_exposu… #>  3 cdm            condition_oc… cdm         condition… NA           condition_o… #>  4 cdm            device_expos… cdm         device_ex… NA           device_expo… #>  5 cdm            visit_occurr… cdm         visit_occ… NA           visit_occur… #>  6 cdm            condition_oc… cdm         condition… condition_t… condition_o… #>  7 cdm            condition_oc… cdm         condition… condition_t… condition_i… #>  8 cdm            condition_oc… cdm         condition… condition_t… condition_ed #>  9 cdm            condition_oc… cdm         condition… condition_t… condition_o… #> 10 cdm            condition_oc… cdm         condition… condition_t… condition_o… #> # ℹ 16 more rows #> # ℹ 2 more variables: check_id <chr>, check_description <chr> ndq::dc_input_pcornet #> # A tibble: 22 × 8 #>    schema_current table_current schema_prev table_prev filter_logic check_domain #>    <chr>          <chr>         <chr>       <chr>      <chr>        <chr>        #>  1 cdm            demographic   cdm         demograph… NA           person       #>  2 cdm            diagnosis     cdm         diagnosis  NA           diagnosis    #>  3 cdm            encounter     cdm         encounter  NA           encounter    #>  4 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_o… #>  5 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_i… #>  6 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_ed #>  7 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_o… #>  8 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_o… #>  9 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_i… #> 10 cdm            diagnosis     cdm         diagnosis  enc_type %i… diagnosis_i… #> # ℹ 12 more rows #> # ℹ 2 more variables: check_id <chr>, check_description <chr>  # Use this as your input to the DC function  ## If you would like to retrieve counts from a previous CDM instance, ## configure the function like so: if (FALSE) { # \\dontrun{ my_dc_rslt <- check_dc(dc_tbl = ndq::dc_input_omop,                        omop_or_pcornet = 'omop',                        prev_db_string = 'my_previous_data',                        current_db_string = 'my_current_data',                        prev_ct_src = 'cdm', ## looking in previous CDM instance                        prev_db = my_prev_db_connection,                        check_string = 'dc') } # }  ## If you would like to reference previously executed counts from a prior ## run of check_dc, configure the function like so: if (FALSE) { # \\dontrun{ my_dc_rslt <- check_dc(dc_tbl = ndq::dc_input_omop,                        omop_or_pcornet = 'omop',                        prev_db_string = 'my_previous_data',                        current_db_string = 'my_current_data',                        prev_ct_src = 'result', ## looking in previous results                        prev_db = my_prev_db_connection,                        prev_rslt_tbl = 'my_dc_rslt',                        prev_rslt_schema = 'my_previous_schema',                        check_string = 'dc') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_dcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Concordance — check_dcon","title":"Domain Concordance — check_dcon","text":"Given details pair clinical events, function determine count patients visits meet criteria first event, second event, events. Users can optionally define time limitation combined cohort, patients/visits count towards cohort two events occur within specified number days .","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Concordance — check_dcon","text":"","code":"check_dcon(   dcon_tbl,   compute_level = \"patient\",   omop_or_pcornet = \"omop\",   check_string = \"dcon\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_dcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Concordance — check_dcon","text":"dcon_tbl table describing cohort pair examined; 2 rows per check, one cohort, check_id see ?dcon_input_omop ?dcon_input_pcornet details compute_level string indicating level computation executed accepted values patient visit omop_or_pcornet string indicating CDM format data; defaults omop check_string abbreviated name check; defaults dcon","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain Concordance — check_dcon","text":"list two dataframes: 1. counts patients/visits first cohort, patients/visits second cohort, patients/visits 2. metadata information cohorts counts computed","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Concordance — check_dcon","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::dcon_input_omop #> # A tibble: 4 × 10 #>   cohort_id  check_id   cohort_description schema table date_field concept_field #>   <chr>      <chr>      <chr>              <chr>  <chr> <chr>      <chr>         #> 1 asthma_dx  asthma_dx… asthma diagnosis   cdm    cond… condition… condition_co… #> 2 broncho_rx asthma_dx… bronchodilator (a… cdm    drug… drug_expo… drug_concept… #> 3 IP_visits  IP_visits… IP visits          cdm    visi… visit_sta… NA            #> 4 IP_conds   IP_visits… IP condition head… cdm    cond… condition… NA            #> # ℹ 3 more variables: conceptset_name <chr>, filter_logic <chr>, #> #   time_between_events <dbl> ndq::dcon_input_pcornet #> # A tibble: 4 × 11 #>   cohort_id check_id cohort_description schema table date_field vocabulary_field #>   <chr>     <chr>    <chr>              <chr>  <chr> <chr>      <chr>            #> 1 asthma_dx asthma_… asthma diagnosis   cdm    diag… admit_date dx_type          #> 2 broncho_… asthma_… bronchodilator (a… cdm    pres… rx_start_… NA               #> 3 IP_visits IP_visi… IP visits          cdm    enco… admit_date NA               #> 4 IP_conds  IP_visi… IP condition head… cdm    diag… admit_date dx_type          #> # ℹ 4 more variables: concept_field <chr>, conceptset_name <chr>, #> #   filter_logic <chr>, time_between_events <dbl>  # Use this as your input to the DCON function ## To execute the check at the patient level: if (FALSE) { # \\dontrun{ my_dcon_rslt <- check_dcon(dcon_tbl = ndq::dcon_input_omop,                            compute_level = 'patient',                            omop_or_pcornet = 'omop',                            check_string = 'dcon') } # }  ## To execute the check at the visit level: if (FALSE) { # \\dontrun{ my_dcon_rslt <- check_dcon(dcon_tbl = ndq::dcon_input_omop,                            compute_level = 'visit',                            omop_or_pcornet = 'omop',                            check_string = 'dcon') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Plausibility — check_dp","title":"Date Plausibility — check_dp","text":"function iterate provided input table identify proportion rows fact type implausible date. Implausibility defined date falls associated visit start date, associated visit end date, patient's birth date.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Plausibility — check_dp","text":"","code":"check_dp(   dp_tbl,   omop_or_pcornet = \"omop\",   visit_tbl = cdm_tbl(\"visit_occurrence\"),   dob_tbl = cdm_tbl(\"person\"),   check_string = \"dp\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date Plausibility — check_dp","text":"dp_tbl table information fact types evaluated comparison visit & birth dates   omop_or_pcornet string indicating CDM format data; defaults omop visit_tbl CDM table visit identifiers dates; defaults cdm_tbl(visit_occurrence) dob_tbl CDM table patient identifiers birth dates; defaults cdm_tbl(person) check_string abbreviated identifier identify output module defaults dp","code":"see ?ndq::dp_input_omop for more details"},{"path":"https://pedsnet.github.io/ndq/reference/check_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date Plausibility — check_dp","text":"table count & proportion rows implausible date value, meaning fell associated visit start date, associated visit end date, patient birth date","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date Plausibility — check_dp","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::dp_input_omop #> # A tibble: 3 × 6 #>   check_id check_description schema table                date_field filter_logic #>   <chr>    <chr>             <chr>  <chr>                <chr>      <lgl>        #> 1 pr       procedures        cdm    procedure_occurrence procedure… NA           #> 2 co       conditions        cdm    condition_occurrence condition… NA           #> 3 dr       drugs             cdm    drug_exposure        drug_expo… NA           ndq::dp_input_pcornet #> # A tibble: 4 × 6 #>   check_id check_description         schema table       date_field  filter_logic #>   <chr>    <chr>                     <chr>  <chr>       <chr>       <lgl>        #> 1 pr       procedures                cdm    procedures  px_date     NA           #> 2 co       conditions                cdm    diagnosis   admit_date  NA           #> 3 rx       prescribed drugs          cdm    prescribing rx_start_d… NA           #> 4 admin    inpatient administrations cdm    med_admin   med_admin_… NA            # Use this as your input to the DP function if (FALSE) { # \\dontrun{ my_dp_rslt <- check_dp(dp_tbl = ndq::dp_input_omop,                        omop_or_pcornet = 'omop',                        visit_tbl = cdm_tbl('visit_occurrence'), ## table with visit/encounter dates                        dob_tbl = cdm_tbl('person'), ## table with dates of birth                        check_string = 'dp') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_ecp.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Concepts Present — check_ecp","title":"Expected Concepts Present — check_ecp","text":"function iterate provided input table identify count patients concept identified defined concept set proportion patients concept based defined cohort table.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_ecp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Concepts Present — check_ecp","text":"","code":"check_ecp(ecp_tbl, omop_or_pcornet = \"omop\", check_string = \"ecp\")"},{"path":"https://pedsnet.github.io/ndq/reference/check_ecp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected Concepts Present — check_ecp","text":"ecp_tbl table information regarding concepts associated fact tables evaluated, cohort used establish patient denominator omop_or_pcornet string indicating CDM format data; defaults omop check_string abbreviated identifier identify output module defaults ecp","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_ecp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected Concepts Present — check_ecp","text":"table total patient count, count patients particular concept, proportion total patients concept, relevant descriptive metadata","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_ecp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected Concepts Present — check_ecp","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::ecp_input_omop #> # A tibble: 5 × 9 #>   check_id   cohort_definition           cohort_schema cohort_table schema table #>   <chr>      <chr>                       <chr>         <chr>        <chr>  <chr> #> 1 hemoglobin All patients in CDM person… cdm           person       cdm    meas… #> 2 sodium     All patients in CDM person… cdm           person       cdm    meas… #> 3 flu        All patients in CDM person… cdm           person       cdm    meas… #> 4 height     All patients in CDM person… cdm           person       cdm    meas… #> 5 weight     All patients in CDM person… cdm           person       cdm    meas… #> # ℹ 3 more variables: concept_field <chr>, conceptset_name <chr>, #> #   filter_logic <lgl> ndq::ecp_input_pcornet #> # A tibble: 5 × 10 #>   check_id   cohort_definition           cohort_schema cohort_table schema table #>   <chr>      <chr>                       <chr>         <chr>        <chr>  <chr> #> 1 hemoglobin All patients in CDM person… cdm           demographic  cdm    lab_… #> 2 sodium     All patients in CDM person… cdm           demographic  cdm    lab_… #> 3 flu        All patients in CDM person… cdm           demographic  cdm    lab_… #> 4 height     All patients in CDM person… cdm           demographic  cdm    lab_… #> 5 weight     All patients in CDM person… cdm           demographic  cdm    lab_… #> # ℹ 4 more variables: concept_field <chr>, vocabulary_field <lgl>, #> #   conceptset_name <chr>, filter_logic <lgl>  # Use this as your input to the ECP function ## To execute the check at the patient level: if (FALSE) { # \\dontrun{ my_ecp_rslt <- check_ecp(ecp_tbl = ndq::ecp_input_omop,                          omop_or_pcornet = 'omop',                          check_string = 'ecp') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_fot.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time — check_fot","title":"Facts Over Time — check_fot","text":"function compute number rows, patients, (optionally) visits associated fact interest within specified time period. user supply end points time span (.e. January 2009 - January 2024) time period wish divide (.e. month, year).","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time — check_fot","text":"","code":"check_fot(   fot_tbl,   omop_or_pcornet = \"omop\",   compute_method = \"loop\",   time_span = list(\"2009-01-01\", today()),   time_period = \"month\",   lookback_interval = 1,   check_string = \"fot\",   visits_only = FALSE,   distinct_visits = TRUE )"},{"path":"https://pedsnet.github.io/ndq/reference/check_fot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facts Over Time — check_fot","text":"fot_tbl table information describing fact tables examined; see ?fot_input_omop ?fot_input_pcornet details omop_or_pcornet string indicating CDM format data; defaults omop compute_method string input either loop group; controls whether check executed looping time period grouping date field time_span list contains start date end date time span (.e. list(2009-01-01, 2015-01-01)) time_period string indicating length time time span divided (.e. months, years) lookback_interval number time periods (defined time_period) look back interval (.e. 1 year, 3 months); defaults 1 check_string abbreviated name check; defaults fot visits_only TRUE, counts distinct visits patients rows distinct_visits TRUE, counts distinct visits well total counts total patients","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facts Over Time — check_fot","text":"dataframe one row time period within specified time span check; visits_only = TRUE, produce counts visits check + time period visits_only = FALSE distinct_visits = TRUE, produce counts patients, rows, visits check + time period visits_only = FALSE distinct_visits = FALSE, produce counts patients rows check + time period","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facts Over Time — check_fot","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::fot_input_omop #> # A tibble: 22 × 6 #>    check_id  check_description              schema table date_field filter_logic #>    <chr>     <chr>                          <chr>  <chr> <chr>      <chr>        #>  1 vi        all visits                     cdm    visi… visit_sta… NA           #>  2 vo_office outpatient visits              cdm    visi… visit_sta… visit_conce… #>  3 vo_labs   outpatient lab visits          cdm    visi… visit_sta… visit_conce… #>  4 vo_th     telehealth visits              cdm    visi… visit_sta… visit_conce… #>  5 vo_oa     other ambulatory visits        cdm    visi… visit_sta… visit_conce… #>  6 vip       inpatient visits (9201 or 200… cdm    visi… visit_sta… visit_conce… #>  7 ved       emergency department visits    cdm    visi… visit_sta… visit_conce… #>  8 vob       observation visits             cdm    visi… visit_sta… visit_conce… #>  9 co        all conditions                 cdm    cond… condition… NA           #> 10 dp        prescription drugs             cdm    drug… drug_expo… drug_type_c… #> # ℹ 12 more rows ndq::fot_input_pcornet #> # A tibble: 21 × 6 #>    check_id  check_description              schema table date_field filter_logic #>    <chr>     <chr>                          <chr>  <chr> <chr>      <chr>        #>  1 vi        all visits                     cdm    enco… admit_date NA           #>  2 vo_office outpatient visits              cdm    enco… admit_date enc_type ==… #>  3 vo_th     telehealth visits              cdm    enco… admit_date enc_type ==… #>  4 vo_oa     other ambulatory visits        cdm    enco… admit_date enc_type ==… #>  5 vip       inpatient visits (9201 or 200… cdm    enco… admit_date enc_type %i… #>  6 ved       emergency department visits    cdm    enco… admit_date enc_type ==… #>  7 vob       observation visits             cdm    enco… admit_date enc_type ==… #>  8 co        all diagnoses                  cdm    diag… admit_date NA           #>  9 dp        prescription drugs             cdm    pres… rx_start_… NA           #> 10 ip        inpatient administration drugs cdm    med_… medadmin_… NA           #> # ℹ 11 more rows  # Use this as your input to the FOT function ## This check can be executed for different time period lengths, like... ### Yearly if (FALSE) { # \\dontrun{ my_fot_rslt <- check_fot(fot_tbl = ndq::fot_input_omop,                          omop_or_pcornet = 'omop',                          compute_method = 'loop', # use 'group' for high performant DBMSs                          time_span = list('2015-01-01', '2025-01-01'),                          time_period = 'year',                          lookback_interval = 1,                          check_string = 'fot') } # }  ### Monthly if (FALSE) { # \\dontrun{ my_fot_rslt <- check_fot(fot_tbl = ndq::fot_input_omop,                          omop_or_pcornet = 'omop',                          compute_method = 'loop', # use 'group' for high performant DBMSs                          time_span = list('2015-01-01', '2025-01-01'),                          time_period = 'month',                          lookback_interval = 1,                          check_string = 'fot') } # }  ### Quarterly if (FALSE) { # \\dontrun{ my_fot_rslt <- check_fot(fot_tbl = ndq::fot_input_omop,                          omop_or_pcornet = 'omop',                          compute_method = 'loop', # use 'group' for high performant DBMSs                          time_span = list('2015-01-01', '2025-01-01'),                          time_period = 'month',                          lookback_interval = 3,                          check_string = 'fot') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time (Trino/Snowflake Implementation) — check_fot_group","title":"Facts Over Time (Trino/Snowflake Implementation) — check_fot_group","text":"Facts Time (Trino/Snowflake Implementation)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time (Trino/Snowflake Implementation) — check_fot_group","text":"","code":"check_fot_group(   fot_tbl,   omop_or_pcornet = \"omop\",   time_frame,   lookback_interval = 1,   check_string = \"fot\",   visits_only = TRUE,   distinct_visits = TRUE )"},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facts Over Time (Trino/Snowflake Implementation) — check_fot_group","text":"fot_tbl table information describing fact tables examined; see ?fot_input_omop ?fot_input_pcornet details omop_or_pcornet string indicating CDM format data; defaults omop time_frame table dates iterated retrieve facts time period; columns: time_start, time_end lookback_interval number time periods (defined check_fot) look back; defaults 1 check_string abbreviated name check; defaults fot visits_only TRUE, counts distinct visits patients rows distinct_visits TRUE, counts distinct visits well total counts total patients","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facts Over Time (Trino/Snowflake Implementation) — check_fot_group","text":"dataframe one row time period within specified time span check; visits_only = TRUE, produce counts visits check + time period visits_only = FALSE distinct_visits = TRUE, produce counts patients, rows, visits check + time period visits_only = FALSE distinct_visits = FALSE, produce counts patients rows check + time period","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time (Original Postgres Implementation) — check_fot_loop","title":"Facts Over Time (Original Postgres Implementation) — check_fot_loop","text":"Facts Time (Original Postgres Implementation)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time (Original Postgres Implementation) — check_fot_loop","text":"","code":"check_fot_loop(   fot_tbl,   time_frame,   omop_or_pcornet = \"omop\",   lookback_interval = 1,   check_string = \"fot\",   visits_only = FALSE,   distinct_visits = TRUE )"},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facts Over Time (Original Postgres Implementation) — check_fot_loop","text":"fot_tbl table information describing fact tables examined; see ?fot_input_omop ?fot_input_pcornet details time_frame table dates iterated retrieve facts time period; columns: time_start, time_end omop_or_pcornet string indicating CDM format data; defaults omop lookback_interval number time periods (defined check_fot) look back; defaults 1 check_string abbreviated name check; defaults fot visits_only TRUE, counts distinct visits patients rows distinct_visits TRUE, counts distinct visits well total counts total patients","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_fot_loop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facts Over Time (Original Postgres Implementation) — check_fot_loop","text":"dataframe one row time period within specified time span check; visits_only = TRUE, produce counts visits check + time period visits_only = FALSE distinct_visits = TRUE, produce counts patients, rows, visits check + time period visits_only = FALSE distinct_visits = FALSE, produce counts patients rows check + time period","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_mf_visitid.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Field: Visit ID — check_mf_visitid","title":"Missing Field: Visit ID — check_mf_visitid","text":"function check see visit_occurrence_id/encounterid given fact table also exists visit_occurrence/encoubter table identify cases visit_occurrence_id/encounterid missing entirely (NULL). may cases expected (example, immunizations imported external registry) generally visit_occurrence_id/encounterid populated exist primary key visit_occurrence/encounter table.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_mf_visitid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Field: Visit ID — check_mf_visitid","text":"","code":"check_mf_visitid(   mf_tbl,   omop_or_pcornet = \"omop\",   visit_tbl = cdm_tbl(\"visit_occurrence\"),   check_string = \"mf_visitid\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_mf_visitid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Field: Visit ID — check_mf_visitid","text":"mf_tbl table information tables cross checked visit_tbl ensure visit_occurrence_id / encounterid exists primary key omop_or_pcornet string indicating CDM format data; defaults omop visit_tbl CDM visit_occurrence / encounter table contains visit ID primary key check_string abbreviated identifier identify output module defaults mf_visitid","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_mf_visitid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Field: Visit ID — check_mf_visitid","text":"table summarizing total number visits fact table, number NULL visits, number visits link back visit table. columns: measure, total_visits, missing_visits_total, missing_visits_distinct, visit_na, total_id, check_name, database_version,site","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_mf_visitid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Field: Visit ID — check_mf_visitid","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::mf_input_omop #> # A tibble: 4 × 5 #>   check_id check_description                 schema table           filter_logic #>   <chr>    <chr>                             <chr>  <chr>           <chr>        #> 1 coied    conditions excluding problem list cdm    condition_occu… !condition_… #> 2 dr       all drugs                         cdm    drug_exposure   NA           #> 3 dp       prescription or inpatient drugs   cdm    drug_exposure   !drug_type_… #> 4 pr       all procedures                    cdm    procedure_occu… NA           ndq::mf_input_pcornet #> # A tibble: 4 × 5 #>   check_id check_description                 schema table       filter_logic #>   <chr>    <chr>                             <chr>  <chr>       <lgl>        #> 1 coied    conditions excluding problem list cdm    diagnosis   NA           #> 2 admin    inpatient administrations         cdm    med_admin   NA           #> 3 rx       prescription                      cdm    prescribing NA           #> 4 pr       all procedures                    cdm    procedures  NA            # Use this as your input to the MF: Visit ID function if (FALSE) { # \\dontrun{ my_mf_rslt <- check_mf(mf_tbl = ndq::mf_input_omop,                        omop_or_pcornet = 'omop',                        visit_tbl = cdm_tbl('visit_occurrence'), ## table with visit ID primary keys                        check_string = 'mf_visitid') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_uc.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmapped Concepts — check_uc","title":"Unmapped Concepts — check_uc","text":"function evaluate count proportion unmapped concepts associated fact type interest. produce_mapped_list set TRUE, summary source values associated unmapped concepts also produced help identify areas mappings potentially improved.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_uc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmapped Concepts — check_uc","text":"","code":"check_uc(   uc_tbl,   by_year = FALSE,   produce_mapped_list = TRUE,   unmapped_values = c(44814650L, 0L, 44814653L, 44814649L),   check_string = \"uc\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_uc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmapped Concepts — check_uc","text":"uc_tbl dataframe metadata describing tables/columns unmapped concepts identified by_year boolean indicating whether analysis conducted longitudinally year ; note mapped list produced longitudinal analysis produce_mapped_list TRUE produce table source values associated top unmapped values; table iteratively output database backend choice stored locally. source values > 10 occurrences included. unmapped_values concepts / values indicate unmapped value check_string abbreviated identifier identify output module defaults uc","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_uc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unmapped Concepts — check_uc","text":"by_year FALSE: dataframe total row count, unmapped row count, proportion unmapped values, additional descriptive metadata check","code":"if `by_year` is `TRUE`: a dataframe with the total row count, the unmapped row count, the proportion     of unmapped values, and some additional descriptive metadata for each check stratified by each year     present in the fact table      if `produce_mapped_list` is `TRUE`, then a table with name `uc_grpd` that includes     the source values (with > 10 appearances) and counts of those values associated     with unmapped concepts"},{"path":"https://pedsnet.github.io/ndq/reference/check_uc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unmapped Concepts — check_uc","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::uc_input_omop #> # A tibble: 9 × 8 #>   check_id check_description       schema table concept_field source_value_field #>   <chr>    <chr>                   <chr>  <chr> <chr>         <chr>              #> 1 dr       all drugs               cdm    drug… drug_concept… drug_source_value  #> 2 di       inpatient administrati… cdm    drug… drug_concept… drug_source_value  #> 3 dp       prescription drugs      cdm    drug… drug_concept… drug_source_value  #> 4 du       drug dose unit          cdm    drug… dose_unit_co… dose_unit_source_… #> 5 drt      drug route              cdm    drug… route_concep… route_source_value #> 6 co       conditions              cdm    cond… condition_co… condition_source_… #> 7 co_scid  condition source        cdm    cond… condition_so… condition_source_… #> 8 po       ordered procedures      cdm    proc… procedure_co… procedure_source_… #> 9 pb       billed procedures       cdm    proc… procedure_co… procedure_source_… #> # ℹ 2 more variables: date_field <chr>, filter_logic <chr> ndq::uc_input_pcornet #> # A tibble: 7 × 8 #>   check_id check_description       schema table concept_field source_value_field #>   <chr>    <chr>                   <chr>  <chr> <chr>         <chr>              #> 1 di       inpatient administrati… cdm    med_… medadmin_code raw_medadmin_med_… #> 2 dp       prescription drugs      cdm    pres… rxnorm_cui    raw_rx_med_name    #> 3 du       rx dose unit            cdm    pres… rx_dose_orde… raw_rx_dose_order… #> 4 drt      rx route                cdm    pres… rx_route      raw_rx_route       #> 5 co       diagnoses               cdm    diag… dx            raw_dx             #> 6 po       ordered procedures      cdm    proc… px            raw_px             #> 7 pb       billed procedures       cdm    proc… px            raw_px             #> # ℹ 2 more variables: date_field <chr>, filter_logic <chr>  # Use this as your input to the UC function ## Overall if (FALSE) { # \\dontrun{ my_uc_rslt <- check_uc(uc_tbl = ndq::uc_input_omop,                        by_year = FALSE,                        produce_mapped_list = TRUE,                        unmapped_values = c(44814650L,0L,                                            44814653L, 44814649L),                        omop_or_pcornet = 'omop',                        check_string = 'uc') } # }  ## By Year if (FALSE) { # \\dontrun{ my_uc_rslt <- check_uc(uc_tbl = ndq::uc_input_omop,                        by_year = TRUE,                        produce_mapped_list = FALSE,                        unmapped_values = c(44814650L,0L,                                            44814653L, 44814649L),                        omop_or_pcornet = 'omop',                        check_string = 'uc') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_uc_by_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmapped Concepts by Year — check_uc_by_year","title":"Unmapped Concepts by Year — check_uc_by_year","text":"function evaluate count proportion unmapped concepts associated fact type interest, stratified year.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_uc_by_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmapped Concepts by Year — check_uc_by_year","text":"","code":"check_uc_by_year(   uc_tbl,   unmapped_values = c(44814650L, 0L, 44814653L, 44814649L),   check_string = \"uc\" )"},{"path":"https://pedsnet.github.io/ndq/reference/check_uc_by_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmapped Concepts by Year — check_uc_by_year","text":"uc_tbl dataframe metadata describing tables/columns unmapped concepts identified unmapped_values concepts / values indicate unmapped value check_string abbreviated identifier identify output module defaults uc","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_uc_by_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unmapped Concepts by Year — check_uc_by_year","text":"dataframe total row count, unmapped row count, proportion unmapped values, additional descriptive metadata check stratified year present fact table","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Vocabulary Conformance — check_vc","title":"Vocabulary Conformance — check_vc","text":"function use vocabulary.concept table identify vocabulary concept determine many rows comply standard vocabularies expected field many rows violate expectations.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vocabulary Conformance — check_vc","text":"","code":"check_vc(   vc_tbl,   omop_or_pcornet = \"omop\",   check_string = \"vc\",   concept_tbl = vocabulary_tbl(\"concept\"),   null_values = c(44814650L, 0L, 44814653L, 44814649L) )"},{"path":"https://pedsnet.github.io/ndq/reference/check_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vocabulary Conformance — check_vc","text":"vc_tbl table table, field, vocabulary information check omop_or_pcornet string indicating CDM format data; defaults omop check_string abbreviated identifier identify output module defaults vc concept_tbl vocabulary table, like OMOP concept table, least concept column interest (concept_id concept_code), concept name, vocabulary id null_values vector NULL values (values belong accepted vocabularies broadly accepted) excluded identifying non-valueset concepts","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vocabulary Conformance — check_vc","text":"dataframe summary information vocabulary appears field, violations marked T/F field; vocabularies associated indicated null_values ignored, proportions may add 1 result","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vocabulary Conformance — check_vc","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::vc_input_omop #> # A tibble: 9 × 6 #>   check_id     schema table    acceptable_vocabular…¹ concept_field filter_logic #>   <chr>        <chr>  <chr>    <chr>                  <chr>         <lgl>        #> 1 pr_cid       cdm    procedu… ICD10CM,CPT4,ICD9CM,I… procedure_co… NA           #> 2 co_cscid     cdm    conditi… ICD9,ICD9CM,ICD10,ICD… condition_so… NA           #> 3 im_dose      cdm    immuniz… UCUM                   imm_dose_uni… NA           #> 4 dt_cause_cid cdm    death    SNOMED, OMOP Extension cause_concep… NA           #> 5 co_cid       cdm    conditi… SNOMED,OMOP Extension  condition_co… NA           #> 6 dr_cid       cdm    drug_ex… RxNorm, RxNorm Extens… drug_concept… NA           #> 7 im_cid       cdm    immuniz… CVX                    immunization… NA           #> 8 dr_dose      cdm    drug_ex… UCUM                   dose_unit_co… NA           #> 9 pr_pscid     cdm    procedu… ICD10CM,CPT4,ICD9CM,I… procedure_so… NA           #> # ℹ abbreviated name: ¹​acceptable_vocabularies ndq::vc_input_pcornet #> # A tibble: 7 × 6 #>   check_id     schema table    acceptable_vocabular…¹ concept_field filter_logic #>   <chr>        <chr>  <chr>    <chr>                  <chr>         <lgl>        #> 1 pr_cid       cdm    procedu… ICD10CM,CPT4,ICD9CM,I… px            NA           #> 2 im_dose      cdm    immuniz… UCUM                   vx_dose_unit  NA           #> 3 dt_cause_cid cdm    death    SNOMED, OMOP Extension cause_concep… NA           #> 4 co_cid       cdm    diagnos… SNOMED,ICD9,ICD9CM,IC… dx            NA           #> 5 dr_cid       cdm    prescri… RxNorm, RxNorm Extens… rxnorm_cui    NA           #> 6 im_cid       cdm    immuniz… CVX,NDC,CPT4,HCPCS,Rx… vx_code       NA           #> 7 dr_dose      cdm    prescri… UCUM                   rx_dose_orde… NA           #> # ℹ abbreviated name: ¹​acceptable_vocabularies  # Use this as your input to the vc function if (FALSE) { # \\dontrun{ my_vc_rslt <- check_vc(vc_tbl = ndq::vc_input_omop,                        omop_or_pcornet = 'omop',                        concept_tbl = vocabulary_tbl(\"concept\"), ## points to OHDSI concept table                        null_values = c(44814650L,0L,                                        44814653L,44814649L), ## ignored illegal vocabs                        check_string = 'vc') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/check_vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Valueset Conformance — check_vs","title":"Valueset Conformance — check_vs","text":"function intake limited valueset expected make entire contents field (minus specified null_values) identify non-permitted values exist field (often).","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valueset Conformance — check_vs","text":"","code":"check_vs(   vs_tbl,   omop_or_pcornet = \"omop\",   check_string = \"vs\",   concept_tbl = vocabulary_tbl(\"concept\"),   null_values = c(44814650L, 0L, 44814653L, 44814649L) )"},{"path":"https://pedsnet.github.io/ndq/reference/check_vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valueset Conformance — check_vs","text":"vs_tbl table table, field, valueset information check omop_or_pcornet string indicating CDM format data; defaults omop check_string abbreviated identifier identify output module defaults vs concept_tbl vocabulary table, like OMOP concept table, least concept column interest (concept_id concept_code), concept name, vocabulary id null_values vector NULL values (values part valueset broadly accepted) excluded identifying non-valueset concepts","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valueset Conformance — check_vs","text":"dataframe summary information value appear valueset, row dummy information violations identified","code":""},{"path":"https://pedsnet.github.io/ndq/reference/check_vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valueset Conformance — check_vs","text":"","code":"# First create input file with desired checks to be executed # You can access examples for both OMOP & PCORnet here: ndq::vs_input_omop #> # A tibble: 2 × 6 #>   check_id    schema table  valueset_name      concept_field        filter_logic #>   <chr>       <chr>  <chr>  <chr>              <chr>                <lgl>        #> 1 pd_race_cid cdm    person valueset_race      race_concept_id      NA           #> 2 pd_eth_cid  cdm    person valueset_ethnicity ethnicity_concept_id NA           ndq::vs_input_pcornet #> # A tibble: 2 × 7 #>   check_id    schema table       valueset_name    concept_field vocabulary_field #>   <chr>       <chr>  <chr>       <chr>            <chr>         <lgl>            #> 1 pd_race_cid cdm    demographic valueset_race    race          NA               #> 2 pd_eth_cid  cdm    demographic valueset_ethnic… hispanic      NA               #> # ℹ 1 more variable: filter_logic <lgl>  # Use this as your input to the VS function if (FALSE) { # \\dontrun{ my_vs_rslt <- check_vs(vs_tbl = ndq::vs_input_omop,                        omop_or_pcornet = 'omop',                        concept_tbl = vocabulary_tbl(\"concept\"), ## points to OHDSI concept table                        null_values = c(44814650L,0L,                                        44814653L,44814649L), # ignored illegal values                        check_string = 'vs') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/create_check_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create informational metadata file — create_check_metadata","title":"Create informational metadata file — create_check_metadata","text":"Create informational metadata file","code":""},{"path":"https://pedsnet.github.io/ndq/reference/create_check_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create informational metadata file — create_check_metadata","text":"","code":"create_check_metadata(   check_tbls,   metadata_file = NULL,   rslt_source = \"remote\",   csv_rslt_path = NULL )"},{"path":"https://pedsnet.github.io/ndq/reference/create_check_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create informational metadata file — create_check_metadata","text":"check_tbls list table names list executed checks extracted metadata_file one exists, previously generated metadata file append . function also highlight new checks need described rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/create_check_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create informational metadata file — create_check_metadata","text":"dataframe executed checks input tables","code":"if a metadate file is provided, it will include all information from this      file in addition to newly added checks that need additional metadata added       if a metadata file is NOT provided, it will include all checks with some      metadata pulled from the tables themselves and other fields left blank for the      user to fill in"},{"path":"https://pedsnet.github.io/ndq/reference/create_vc_vs_output.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional processing for VS & VC checks — create_vc_vs_output","title":"Additional processing for VS & VC checks — create_vc_vs_output","text":"Additional processing VS & VC checks","code":""},{"path":"https://pedsnet.github.io/ndq/reference/create_vc_vs_output.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional processing for VS & VC checks — create_vc_vs_output","text":"","code":"create_vc_vs_output(tbl_list, check_string = \"vc\")"},{"path":"https://pedsnet.github.io/ndq/reference/create_vc_vs_output.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Additional processing for VS & VC checks — create_vc_vs_output","text":"tbl_list list contains vc vs violations check_string string contains table name check output","code":""},{"path":"https://pedsnet.github.io/ndq/reference/create_vc_vs_output.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional processing for VS & VC checks — create_vc_vs_output","text":"pivoted version input table dummy rows added checks return violations","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Cycle Changes Input File (OMOP) — dc_input_omop","title":"Data Cycle Changes Input File (OMOP) — dc_input_omop","text":"sample version OMOP compliant input file Data Cycle Changes data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Cycle Changes Input File (OMOP) — dc_input_omop","text":"","code":"dc_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_omop.html","id":"dc-input-omop","dir":"Reference","previous_headings":"","what":"dc_input_omop","title":"Data Cycle Changes Input File (OMOP) — dc_input_omop","text":"dataframe CSV file 8 columns schema_current schema data reflecting current data model version kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table_current name CDM pre-computed results table used retrieve counts associated current data model schema_prev REQUIRED PREV_CT_SRC = CDM; schema data reflecting previous data model version kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table_prev REQUIRED PREV_CT_SRC = CDM; name CDM pre-computed results table used retrieve counts associated previous data model filter_logic OPTIONAL logic applied table_current table_prev order tailor tables desired check assessment check_domain string indicating domain check (ex: drug_exposure, prescription_drugs) check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Cycle Changes Input File (PCORnet) — dc_input_pcornet","title":"Data Cycle Changes Input File (PCORnet) — dc_input_pcornet","text":"sample version PCORnet compliant input file Data Cycle Changes data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Cycle Changes Input File (PCORnet) — dc_input_pcornet","text":"","code":"dc_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dc_input_pcornet.html","id":"dc-input-pcornet","dir":"Reference","previous_headings":"","what":"dc_input_pcornet","title":"Data Cycle Changes Input File (PCORnet) — dc_input_pcornet","text":"dataframe CSV file 8 columns schema_current schema data reflecting current data model version kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table_current name CDM pre-computed results table used retrieve counts associated current data model schema_prev REQUIRED PREV_CT_SRC = CDM; schema data reflecting previous data model version kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table_prev REQUIRED PREV_CT_SRC = CDM; name CDM pre-computed results table used retrieve counts associated previous data model filter_logic OPTIONAL logic applied table_current table_prev order tailor tables desired check assessment check_domain string indicating domain check (ex: medadmin_drugs, prescription_drugs) check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Concordance Input File (OMOP) — dcon_input_omop","title":"Domain Concordance Input File (OMOP) — dcon_input_omop","text":"sample version OMOP compliant input file Domain Concordance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Concordance Input File (OMOP) — dcon_input_omop","text":"","code":"dcon_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_omop.html","id":"dcon-input-omop","dir":"Reference","previous_headings":"","what":"dcon_input_omop","title":"Domain Concordance Input File (OMOP) — dcon_input_omop","text":"dataframe CSV file 10 columns cohort_id short string describing event row input file check_id short string \"code\" used identify specific check (ex: cancer_oncologists). always TWO rows check_id, row representing one two input cohorts. cohort_description longer description cohort (ex: cancer diagnoses, oncology specialist visits) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used time_between_events null determine length time event occurrence concept_field *_concept_id field concepts make valueset (ex: condition_concept_id, drug_concept_id) conceptset_name OPTIONAL string name concept set identify concepts interest, appears predefined file_subdirectory filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs) time_between_events OPTIONAL integer expressing maximum number days fall two events. Patients events occur far apart included combined cohort.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_omop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Domain Concordance Input File (OMOP) — dcon_input_omop","text":"choose use sample file, please sure set file_subdirectory system.file(\"sample_conceptsets\", package = \"ndq\") functions know access associated concept sets. also option download sample concept sets local directory point location.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Concordance Input File (PCORnet) — dcon_input_pcornet","title":"Domain Concordance Input File (PCORnet) — dcon_input_pcornet","text":"sample version PCORnet compliant input file Domain Concordance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Concordance Input File (PCORnet) — dcon_input_pcornet","text":"","code":"dcon_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_pcornet.html","id":"dcon-input-pcornet","dir":"Reference","previous_headings":"","what":"dcon_input_pcornet","title":"Domain Concordance Input File (PCORnet) — dcon_input_pcornet","text":"dataframe CSV file 10 columns cohort_id short string describing event row input file check_id short string \"code\" used identify specific check (ex: cancer_oncologists). always TWO rows check_id, row representing one two input cohorts. cohort_description longer description cohort (ex: cancer diagnoses, oncology specialist visits) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used time_between_events null determine length time event occurrence vocabulary_field Typically relevant diagnoses procedures, field code vocabulary kept (.e. dx_type, px_type) concept_field field concept codes make valueset (ex: dx, provider_specialty_primary) conceptset_name OPTIONAL string name concept set identify concepts interest, appears predefined file_subdirectory filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed diagnoses) time_between_events OPTIONAL integer expressing maximum number days fall two events. Patients events occur far apart included combined cohort.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dcon_input_pcornet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Domain Concordance Input File (PCORnet) — dcon_input_pcornet","text":"choose use sample file, please sure set file_subdirectory system.file(\"sample_conceptsets\", package = \"ndq\") functions know access associated concept sets. also option download sample concept sets local directory point location.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Plausibility Input File (OMOP) — dp_input_omop","title":"Date Plausibility Input File (OMOP) — dp_input_omop","text":"sample version OMOP compliant input file Date Plausibility data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Plausibility Input File (OMOP) — dp_input_omop","text":"","code":"dp_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_omop.html","id":"dp-input-omop","dir":"Reference","previous_headings":"","what":"dp_input_omop","title":"Date Plausibility Input File (OMOP) — dp_input_omop","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used identify date associated event filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Plausibility Input File (PCORnet) — dp_input_pcornet","title":"Date Plausibility Input File (PCORnet) — dp_input_pcornet","text":"sample version PCORnet compliant input file Date Plausibility data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Plausibility Input File (PCORnet) — dp_input_pcornet","text":"","code":"dp_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/dp_input_pcornet.html","id":"dp-input-pcornet","dir":"Reference","previous_headings":"","what":"dp_input_pcornet","title":"Date Plausibility Input File (PCORnet) — dp_input_pcornet","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used identify date associated event filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed procedures)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Concepts Present Input File (OMOP) — ecp_input_omop","title":"Expected Concepts Present Input File (OMOP) — ecp_input_omop","text":"sample version OMOP compliant input file Unmapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Concepts Present Input File (OMOP) — ecp_input_omop","text":"","code":"ecp_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_omop.html","id":"ecp-input-omop","dir":"Reference","previous_headings":"","what":"ecp_input_omop","title":"Expected Concepts Present Input File (OMOP) — ecp_input_omop","text":"dataframe CSV file 9 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) cohort_definition definition specific cohort used identify patients concept interest cohort_schema schema cohort_table kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. cohort_table name CDM pre-computed results table cohort stored schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field *_concept_id field concepts make valueset (ex: drug_concept_id, drug_source_concept_id) conceptset_name string name concept set identify concepts interest, appears predefined file_subdirectory filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want identify prescriptions antihypertensives)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_omop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected Concepts Present Input File (OMOP) — ecp_input_omop","text":"choose use sample file, please sure set file_subdirectory system.file(\"sample_conceptsets\", package = \"ndq\") functions know access associated concept sets. also option download sample concept sets local directory point location.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Concepts Present Input File (PCORnet) — ecp_input_pcornet","title":"Expected Concepts Present Input File (PCORnet) — ecp_input_pcornet","text":"sample version PCORnet compliant input file Unmapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Concepts Present Input File (PCORnet) — ecp_input_pcornet","text":"","code":"ecp_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_pcornet.html","id":"ecp-input-pcornet","dir":"Reference","previous_headings":"","what":"ecp_input_pcornet","title":"Expected Concepts Present Input File (PCORnet) — ecp_input_pcornet","text":"dataframe CSV file 9 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) cohort_definition definition specific cohort used identify patients concept interest cohort_schema schema cohort_table kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. cohort_table name CDM pre-computed results table cohort stored schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field *_concept_id field concepts make valueset (ex: rxnorm_cui, raw_rxnorm_cui) vocabulary_field Typically relevant diagnoses procedures, field code vocabulary kept (.e. dx_type, px_type) conceptset_name string name concept set identify concepts interest, appears predefined file_subdirectory filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want identify billed diagnoses hypertension)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/ecp_input_pcornet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Expected Concepts Present Input File (PCORnet) — ecp_input_pcornet","text":"choose use sample file, please sure set file_subdirectory system.file(\"sample_conceptsets\", package = \"ndq\") functions know access associated concept sets. also option download sample concept sets local directory point location.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/find_concept_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Find concept names for existing concept_ids — find_concept_names","title":"Find concept names for existing concept_ids — find_concept_names","text":"Find concept names existing concept_ids","code":""},{"path":"https://pedsnet.github.io/ndq/reference/find_concept_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find concept names for existing concept_ids — find_concept_names","text":"","code":"find_concept_names(   fact_tbl,   omop_or_pcornet,   fact_concept_id,   concept_field,   concept_tbl = vocabulary_tbl(\"concept\") )"},{"path":"https://pedsnet.github.io/ndq/reference/find_concept_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find concept names for existing concept_ids — find_concept_names","text":"fact_tbl fact table associated field omop_or_pcornet string indicating CDM format data; defaults omop fact_concept_id concept field fact table (.e. condition_concept_id dx) concept_field field concept table used analysis; typically concept_name, concept_class_id used RxNorm class identifiers concept_tbl defaults vocabulary_tbl('concept')","code":""},{"path":"https://pedsnet.github.io/ndq/reference/find_concept_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find concept names for existing concept_ids — find_concept_names","text":"provided fact_tbl additional information specified concept_field","code":""},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time Input File (OMOP) — fot_input_omop","title":"Facts Over Time Input File (OMOP) — fot_input_omop","text":"sample version OMOP compliant input file Facts Time data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time Input File (OMOP) — fot_input_omop","text":"","code":"fot_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_omop.html","id":"fot-input-omop","dir":"Reference","previous_headings":"","what":"fot_input_omop","title":"Facts Over Time Input File (OMOP) — fot_input_omop","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used identify date associated event filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time Input File (PCORnet) — fot_input_pcornet","title":"Facts Over Time Input File (PCORnet) — fot_input_pcornet","text":"sample version PCORnet compliant input file Facts Time data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time Input File (PCORnet) — fot_input_pcornet","text":"","code":"fot_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/fot_input_pcornet.html","id":"fot-input-pcornet","dir":"Reference","previous_headings":"","what":"fot_input_pcornet","title":"Facts Over Time Input File (PCORnet) — fot_input_pcornet","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept date_field date field used identify date associated event filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed procedures)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Field: Visit ID Input File (OMOP) — mf_input_omop","title":"Missing Field: Visit ID Input File (OMOP) — mf_input_omop","text":"sample version OMOP compliant input file Missing Field: Visit ID data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Field: Visit ID Input File (OMOP) — mf_input_omop","text":"","code":"mf_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_omop.html","id":"mf-input-omop","dir":"Reference","previous_headings":"","what":"mf_input_omop","title":"Missing Field: Visit ID Input File (OMOP) — mf_input_omop","text":"dataframe CSV file 5 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Field: Visit ID Input File (PCORnet) — mf_input_pcornet","title":"Missing Field: Visit ID Input File (PCORnet) — mf_input_pcornet","text":"sample version PCORnet compliant input file Missing Field: Visit ID data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Field: Visit ID Input File (PCORnet) — mf_input_pcornet","text":"","code":"mf_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/mf_input_pcornet.html","id":"mf-input-pcornet","dir":"Reference","previous_headings":"","what":"mf_input_pcornet","title":"Missing Field: Visit ID Input File (PCORnet) — mf_input_pcornet","text":"dataframe CSV file 5 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want assess billed procedures)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/output_tbl_append.html","id":null,"dir":"Reference","previous_headings":"","what":"output table to database if it does not exist, or append it to an existing table with the same name if it does — output_tbl_append","title":"output table to database if it does not exist, or append it to an existing table with the same name if it does — output_tbl_append","text":"output table database exist, append existing table name ","code":""},{"path":"https://pedsnet.github.io/ndq/reference/output_tbl_append.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"output table to database if it does not exist, or append it to an existing table with the same name if it does — output_tbl_append","text":"","code":"output_tbl_append(   data,   name = NA,   local = FALSE,   file = base::ifelse(config(\"results_target\") == \"file\", TRUE, FALSE),   db = if (!file) config(\"results_target\") else NA,   results_tag = TRUE,   ... )"},{"path":"https://pedsnet.github.io/ndq/reference/output_tbl_append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"output table to database if it does not exist, or append it to an existing table with the same name if it does — output_tbl_append","text":"data data output name name table output local description file blah db blah results_tag blah ... arguments Parameters output_tbl","code":""},{"path":"https://pedsnet.github.io/ndq/reference/output_tbl_append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"output table to database if it does not exist, or append it to an existing table with the same name if it does — output_tbl_append","text":"table exists databse, new data appended, table already existts.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_bmc.html","id":null,"dir":"Reference","previous_headings":"","what":"Best Mapped Concepts – Processing — process_bmc","title":"Best Mapped Concepts – Processing — process_bmc","text":"Intakes output check_bmc order apply additional processing. includes applying user-specified best/best labels added bmc_concepts output, using labels compute proportions best vs best concept representation check.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_bmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Best Mapped Concepts – Processing — process_bmc","text":"","code":"process_bmc(   bmc_results,   bmc_concepts_labelled,   rslt_source = \"remote\",   csv_rslt_path = NULL )"},{"path":"https://pedsnet.github.io/ndq/reference/process_bmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Best Mapped Concepts – Processing — process_bmc","text":"bmc_results bmc_counts table output check_bmc bmc_concepts_labelled bmc_concepts table output check_bmc, additional column called include added \"best\" non-ideal concepts marked 0 (optionally, \"best\" concepts can also marked 1) rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_bmc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Best Mapped Concepts – Processing — process_bmc","text":"dataframe summarizing proportion best vs best concepts given check, indicated appropriate value \"include\" column","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_bmc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Best Mapped Concepts – Processing — process_bmc","text":"","code":"# This function should be run after check_bmc has been executed for all # network institutions and results have been combined into a common table  # All returned concepts should also be labelled to indicate whether they # should be included as a \"best\" concept or not:  readr::read_csv(system.file('extdata', 'bmc_concept_examples.csv', package = 'ndq')) #> Rows: 6 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (2): check_name, concept #> dbl (1): include #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. #> # A tibble: 6 × 3 #>   check_name    concept                   include #>   <chr>         <chr>                       <dbl> #> 1 bmc_race      White                          NA #> 2 bmc_race      Black or African American      NA #> 3 bmc_race      Unknown                         0 #> 4 bmc_ethnicity Hispanic                       NA #> 5 bmc_ethnicity Non-Hispanic                   NA #> 6 bmc_ethnicity Other                           0  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_bmc_process <- process_bmc(bmc_results = my_bmc_rslts,                               bmc_concepts_labelled = my_bmc_concepts,                               rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_bmc_process <- process_bmc(bmc_results = 'my_bmc_rslts',                               bmc_concepts_labelled = 'my_bmc_concepts',                               rslt_source = 'csv',                               csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_bmc_process <- process_bmc(bmc_results = 'my_bmc_rslts',                               bmc_concepts_labelled = 'my_bmc_concepts',                               rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_cfd.html","id":null,"dir":"Reference","previous_headings":"","what":"Clinical Fact Documentation – Processing — process_cfd","title":"Clinical Fact Documentation – Processing — process_cfd","text":"Intakes combined output check_cfd relevant institutions order apply additional processing. compute overall counts/proportions across sites included input tidy descriptive metadata.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_cfd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clinical Fact Documentation – Processing — process_cfd","text":"","code":"process_cfd(cfd_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_cfd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clinical Fact Documentation – Processing — process_cfd","text":"cfd_results tabular input || required tabular output check_cfd. table include results institutions included computation overall / \"network level\" statistics. rslt_source string || defaults remote string identifies location cfd_results table. Acceptable values local - table stored dataframe local R environment csv - table stored CSV file remote - table stored remote database csv_rslt_path string || defaults NULL rslt_source set csv, parameter indicate path result file(s). Otherwise, parameter can left NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_cfd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clinical Fact Documentation – Processing — process_cfd","text":"function return columns cfd_results input additional rows site = total reflect combined results institutions provided input data.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_cfd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clinical Fact Documentation – Processing — process_cfd","text":"","code":"# This function should be run after check_cfd has been executed for all # network institutions and results have been combined into a common table  ## When results are kept locally: if (FALSE) { # \\dontrun{ my_cfd_process <- process_cfd(cfd_results = my_cfd_rslts,                               rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_cfd_process <- process_cfd(cfd_results = 'my_cfd_rslts',                               rslt_source = 'csv',                               csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_cfd_process <- process_cfd(cfd_results = 'my_cfd_rslts',                               rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_dc.html","id":null,"dir":"Reference","previous_headings":"","what":"Data Cycle Changes – Processing — process_dc","title":"Data Cycle Changes – Processing — process_dc","text":"Intakes output check_dc order apply additional processing. includes computing percent change across data model versions computing overall set counts/percent changes across sites included input.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data Cycle Changes – Processing — process_dc","text":"","code":"process_dc(   dc_ct_results,   dc_meta_results,   rslt_source = \"remote\",   csv_rslt_path = NULL )"},{"path":"https://pedsnet.github.io/ndq/reference/process_dc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data Cycle Changes – Processing — process_dc","text":"dc_ct_results name table output check_dc labelled dc_cts contains previous current data cycle counts dc_meta_results name table output check_dc labelled dc_meta contains metadata associated executed check rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data Cycle Changes – Processing — process_dc","text":"dc_ct_results tbl totals additional change proportion threshold columns; dc_meta_results table remains unchanged, original version used needed","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data Cycle Changes – Processing — process_dc","text":"","code":"# This function should be run after check_dc has been executed for all # network institutions and results have been combined into a common table  ## When results are kept locally: if (FALSE) { # \\dontrun{ my_dc_process <- process_dc(dc_ct_results = my_dc_cts,                             dc_meta_results = my_dc_meta,                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_dc_process <- process_dc(dc_ct_results = 'my_dc_cts',                             dc_meta_results = 'my_dc_meta',                             rslt_source = 'csv',                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_dc_process <- process_dc(dc_ct_results = 'my_dc_cts',                             dc_meta_results = 'my_dc_meta',                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain Concordance – Processing — process_dcon","title":"Domain Concordance – Processing — process_dcon","text":"Intakes output check_dcon order apply additional processing. includes computing following cohort overlap counts proportions: cohort_1_only: overall, patients just cohort 1 cohort_2_only: overall, patients just cohort 2 combined: overall, patients 1 2 cohort_1_denom: patients cohort 1 cohort 2 cohort_2_denom: patients cohort 2 cohort 1 cohort_1_in_2: patients cohort 2 also 1 (use cohort 2 denominator) cohort_2_in_1: patients cohort 1 also 2 (use cohort 1 denominator)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain Concordance – Processing — process_dcon","text":"","code":"process_dcon(dcon_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Domain Concordance – Processing — process_dcon","text":"dcon_results table output check_dcon rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Domain Concordance – Processing — process_dcon","text":"dataframe one row cohort overlap computation type listed description, associated raw count (patients visits) associated proportion","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Domain Concordance – Processing — process_dcon","text":"Note cohort_1_in_2 cohort_2_in_1 raw count, different proportions since denominator different","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dcon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain Concordance – Processing — process_dcon","text":"","code":"# This function should be run after check_dcon has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_dcon_process <- process_dcon(dcon_results = my_dcon_rslts,                                 rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_dcon_process <- process_dcon(dcon_results = 'my_dcon_rslts',                                 rslt_source = 'csv',                                 csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_dcon_process <- process_dcon(dcon_results = 'my_dcon_rslts',                                 rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Date Plausibility – Processing — process_dp","title":"Date Plausibility – Processing — process_dp","text":"Intakes output check_dp order apply additional processing. includes creating new check_name_app column specify check computed row level.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date Plausibility – Processing — process_dp","text":"","code":"process_dp(dp_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date Plausibility – Processing — process_dp","text":"dp_results table output check_dp rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date Plausibility – Processing — process_dp","text":"input table additional check_name_app column indicate application level","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date Plausibility – Processing — process_dp","text":"","code":"# This function should be run after check_dp has been executed for all # network institutions and results have been combined into a common table  ## When results are kept locally: if (FALSE) { # \\dontrun{ my_dp_process <- process_dp(dp_results = my_dp_rslts,                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_dp_process <- process_dp(dp_results = 'my_dp_rslts',                             rslt_source = 'csv',                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_dp_process <- process_dp(dp_results = 'my_dp_rslts',                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_ecp.html","id":null,"dir":"Reference","previous_headings":"","what":"Expected Concepts Present – Processing — process_ecp","title":"Expected Concepts Present – Processing — process_ecp","text":"Intakes output check_ecp order apply additional processing. includes creating new check_name_app column specify check computed person level.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_ecp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expected Concepts Present – Processing — process_ecp","text":"","code":"process_ecp(ecp_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_ecp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expected Concepts Present – Processing — process_ecp","text":"ecp_results table output check_ecp rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_ecp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expected Concepts Present – Processing — process_ecp","text":"input table additional check_name_app column indicate application level","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_ecp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expected Concepts Present – Processing — process_ecp","text":"","code":"# This function should be run after check_ecp has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_ecp_process <- process_ecp(ecp_results = my_ecp_rslts,                               rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_ecp_process <- process_ecp(ecp_results = 'my_ecp_rslts',                               rslt_source = 'csv',                               csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_ecp_process <- process_ecp(ecp_results = 'my_ecp_rslts',                               rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_fot.html","id":null,"dir":"Reference","previous_headings":"","what":"Facts Over Time – Processing — process_fot","title":"Facts Over Time – Processing — process_fot","text":"Intakes output check_fot order apply additional processing. includes applying heuristic meant compare fact count given time period time periods around . montly computation, example, heuristic month / ((month-1 * .25) + (month+1 * .25) + (month-12 * .5)) value given month divided weighted average value previous month, next month, month previous year. function can also optionally compute ratio given total_pt column (added user) used denominator ratio_mult value used multiplier.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_fot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Facts Over Time – Processing — process_fot","text":"","code":"process_fot(   fot_results,   target_col = \"row_cts\",   add_ratios = FALSE,   ratio_mult = 10000,   rslt_source = \"remote\",   csv_rslt_path = NULL )"},{"path":"https://pedsnet.github.io/ndq/reference/process_fot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Facts Over Time – Processing — process_fot","text":"fot_results table output check_fot target_col numerical column fot_results used compute heuristic; options row_cts, row_pts, row_visits add_ratios boolean indicate whether ratios / rates computed TRUE, fot_results table additional total_pt column counts denominator user's choosing   ratio_mult add_ratios = TRUE, numerical multiplier used compute rate rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":"for example, the count of patients in that time period that               had a visit"},{"path":"https://pedsnet.github.io/ndq/reference/process_fot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Facts Over Time – Processing — process_fot","text":"list three dataframes: fot_heuristic: summary heuristic (month / ((month-1).25 + (month+1).25 + (month-12)*.5)) fot_heuristic_summary: summary values (mean, med, sd, q1, q3) based heuristic add_ratios = TRUE fot_ratios: fot_results table additional column incidence ratio applied (row_ratio)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_fot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Facts Over Time – Processing — process_fot","text":"","code":"# This function should be run after check_fot has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_fot_process <- process_fot(fot_results = my_fot_rslts,                               target_col = 'row_cts',                               rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_fot_process <- process_fot(fot_results = 'my_fot_rslts',                               target_col = 'row_cts',                               rslt_source = 'csv',                               csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_fot_process <- process_fot(fot_results = 'my_fot_rslts',                               target_col = 'row_cts',                               rslt_source = 'remote') } # }  # You can also optionally compute patient incidence ratios. This computation will use # the patient count, regardless of what is specified in the `target_col` argument. # A column with the total patient count for that time period will need to be added to # the results output. It can reflect any patient cohort, so long as the column is called # `total_pt`. We recommend computing the denominator as part of the initial check_fot execution # and extracting the counts from the resulting output.  if (FALSE) { # \\dontrun{ my_fot_process <- process_fot(fot_results = 'my_fot_rslts',                               target_col = 'row_cts',                               add_ratios = TRUE,                               ratio_mult = 10000,                               rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_mf_visitid.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing Field: Visit ID – Processing — process_mf_visitid","title":"Missing Field: Visit ID – Processing — process_mf_visitid","text":"Intakes output check_mf_visitid order apply additional processing. includes computing proportions missing visits computing overall totals across sites included input.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_mf_visitid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing Field: Visit ID – Processing — process_mf_visitid","text":"","code":"process_mf_visitid(   mf_visitid_results,   rslt_source = \"remote\",   csv_rslt_path = NULL )"},{"path":"https://pedsnet.github.io/ndq/reference/process_mf_visitid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing Field: Visit ID – Processing — process_mf_visitid","text":"mf_visitid_results output check_mf_visitid rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_mf_visitid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing Field: Visit ID – Processing — process_mf_visitid","text":"mf_visitid tbl additional domain, total_ct, proportion column","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_mf_visitid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing Field: Visit ID – Processing — process_mf_visitid","text":"","code":"# This function should be run after check_mf_visitid has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_mf_visitid_process <- process_mf_visitid(mf_visitid_results = my_mf_visitid_rslts,                                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_mf_visitid_process <- process_mf_visitid(mf_visitid_results = 'my_mf_visitid_rslts',                                             rslt_source = 'csv',                                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_mf_visitid_process <- process_mf_visitid(mf_visitid_results = 'my_mf_visitid_rslts',                                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_uc.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmapped Concepts – Processing — process_uc","title":"Unmapped Concepts – Processing — process_uc","text":"Intakes output check_uc order apply additional processing. includes either adding proportions (by_year output) computing overall totals across sites included input (by_year output)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_uc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmapped Concepts – Processing — process_uc","text":"","code":"process_uc(uc_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_uc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unmapped Concepts – Processing — process_uc","text":"uc_results output check_uc rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_uc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unmapped Concepts – Processing — process_uc","text":"table either additional column unmapped proportions (by_year) additional rows include total unmapped counts/proportions across sites (by_year)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_uc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unmapped Concepts – Processing — process_uc","text":"","code":"# This function should be run after check_uc has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_uc_process <- process_uc(uc_results = my_uc_rslts,                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_uc_process <- process_uc(uc_results = 'my_uc_rslts',                             rslt_source = 'csv',                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_uc_process <- process_uc(uc_results = 'my_uc_rslts',                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_vc.html","id":null,"dir":"Reference","previous_headings":"","what":"Vocabulary Conformance – Processing — process_vc","title":"Vocabulary Conformance – Processing — process_vc","text":"Intakes output check_vc order apply additional processing. includes computing row patient proportions computing overall totals across sites included input.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vocabulary Conformance – Processing — process_vc","text":"","code":"process_vc(vc_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_vc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vocabulary Conformance – Processing — process_vc","text":"vc_results output check_vc rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vocabulary Conformance – Processing — process_vc","text":"list contains two dataframes: vc_processed: dataframe additional columns include proportions violations overall summary vc_violations: dataframe violating vocabularies","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vocabulary Conformance – Processing — process_vc","text":"","code":"# This function should be run after check_vc has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_vc_process <- process_vc(vc_results = my_vc_rslts,                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_vc_process <- process_vc(vc_results = 'my_vc_rslts',                             rslt_source = 'csv',                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_vc_process <- process_vc(vc_results = 'my_vc_rslts',                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/process_vs.html","id":null,"dir":"Reference","previous_headings":"","what":"Valueset Conformance – Processing — process_vs","title":"Valueset Conformance – Processing — process_vs","text":"Intakes output check_vs order apply additional processing. includes computing row patient proportions computing overall totals across sites included input.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valueset Conformance – Processing — process_vs","text":"","code":"process_vs(vs_results, rslt_source = \"remote\", csv_rslt_path = NULL)"},{"path":"https://pedsnet.github.io/ndq/reference/process_vs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Valueset Conformance – Processing — process_vs","text":"vs_results output check_vs rslt_source location results. acceptable values local (stored dataframe R environment), csv (stored CSV files), remote (stored remote DBMS); defaults remote csv_rslt_path results stored CSV files, path location files. results local remote, leave NULL","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Valueset Conformance – Processing — process_vs","text":"list contains two dataframes: vs_processed: dataframe additional columns include proportions violations overall summary vs_violations: dataframe violating values appear valueset","code":""},{"path":"https://pedsnet.github.io/ndq/reference/process_vs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Valueset Conformance – Processing — process_vs","text":"","code":"# This function should be run after check_vs has been executed for all # network institutions and results have been combined into a common table  # Once the labels have been applied, the function can be executed ## When results are kept locally: if (FALSE) { # \\dontrun{ my_vs_process <- process_vs(vs_results = my_vs_rslts,                             rslt_source = 'local') } # }  ## When results are kept in CSV files: if (FALSE) { # \\dontrun{ my_vs_process <- process_vs(vs_results = 'my_vs_rslts',                             rslt_source = 'csv',                             csv_rslt_path = 'path/to/my/results') } # }  ## When results are kept on a remote database: if (FALSE) { # \\dontrun{ my_vs_process <- process_vs(vs_results = 'my_vs_rslts',                             rslt_source = 'remote') } # }"},{"path":"https://pedsnet.github.io/ndq/reference/summarize_large_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Add summary columns for a large N of sites — summarize_large_n","title":"Add summary columns for a large N of sites — summarize_large_n","text":"Add summary columns large N sites","code":""},{"path":"https://pedsnet.github.io/ndq/reference/summarize_large_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add summary columns for a large N of sites — summarize_large_n","text":"","code":"summarize_large_n(   dq_output,   num_col,   grp_vars,   check_string,   time = FALSE,   shape )"},{"path":"https://pedsnet.github.io/ndq/reference/summarize_large_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add summary columns for a large N of sites — summarize_large_n","text":"dq_output output table processing columns added num_col numeric column used compute statistics grp_vars grouping variables computation check_string string indicating check type time logical indicating whether check time dependent shape 'long' 'wide' indicating whether summary statistics separate columns (wide) assigned separate rows, name summary statistic site column (long)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/summarize_large_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add summary columns for a large N of sites — summarize_large_n","text":"dataframe summary statistics numeric column provided. contains columns dq_output plus:","code":"if time = `TRUE`, the mean and median are returned.      if time = `FALSE`, the max, min, q1, q3, mean, and median are returned      These values are treated as \"sites\" to assist with Shiny implementation"},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmapped Concepts Input File (OMOP) — uc_input_omop","title":"Unmapped Concepts Input File (OMOP) — uc_input_omop","text":"sample version OMOP compliant input file Unmapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmapped Concepts Input File (OMOP) — uc_input_omop","text":"","code":"uc_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_omop.html","id":"uc-input-omop","dir":"Reference","previous_headings":"","what":"uc_input_omop","title":"Unmapped Concepts Input File (OMOP) — uc_input_omop","text":"dataframe CSV file 8 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) check_description longer description check (ex: full drug_exposure table, prescribed drugs based drug_type_concept_id) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field *_concept_id field concepts make valueset (ex: drug_concept_id, drug_source_concept_id) source_value_field analyses produce_mapped_list == TRUE, *_source_value field linked concept_field interest used produce list source values associated unmapped concepts date_field analyses by_year == TRUE, date field used retrieve year associted unmapped concepts filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want identify prescription drugs unmapped)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Unmapped Concepts Input File (PCORnet) — uc_input_pcornet","title":"Unmapped Concepts Input File (PCORnet) — uc_input_pcornet","text":"sample version PCORnet compliant input file Unmapped Concepts data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unmapped Concepts Input File (PCORnet) — uc_input_pcornet","text":"","code":"uc_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/uc_input_pcornet.html","id":"uc-input-pcornet","dir":"Reference","previous_headings":"","what":"uc_input_pcornet","title":"Unmapped Concepts Input File (PCORnet) — uc_input_pcornet","text":"dataframe CSV file 8 columns check_id short string \"code\" used identify specific check (ex: dr_admin, dr_rx) check_description longer description check (ex: full med_admin table, full prescribing table) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept concept_field *_concept_id field concepts make valueset (ex: rxnorm_cui, raw_rxnorm_cui) source_value_field analyses produce_mapped_list == TRUE, *_source_value field linked concept_field interest used produce list source values associated unmapped concepts date_field analyses by_year == TRUE, date field used retrieve year associted unmapped concepts filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want identify billed procedures unmapped)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Vocabulary Conformance Input File (OMOP) — vc_input_omop","title":"Vocabulary Conformance Input File (OMOP) — vc_input_omop","text":"sample version OMOP compliant input file Vocabulary Conformance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vocabulary Conformance Input File (OMOP) — vc_input_omop","text":"","code":"vc_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_omop.html","id":"vc-input-omop","dir":"Reference","previous_headings":"","what":"vc_input_omop","title":"Vocabulary Conformance Input File (OMOP) — vc_input_omop","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept acceptable_vocabularies comma-separated string acceptable vocabulary values (ex: \"RxNorm, RxNorm Extension\") concept_field *_concept_id field concepts evaluated (ex: drug_concept_id, drug_source_concept_id) filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: prescription drugs different vocabulary requirements inpatient administrations)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Vocabulary Conformance Input File (PCORnet) — vc_input_pcornet","title":"Vocabulary Conformance Input File (PCORnet) — vc_input_pcornet","text":"sample version PCORnet compliant input file Vocabulary Conformance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vocabulary Conformance Input File (PCORnet) — vc_input_pcornet","text":"","code":"vc_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/vc_input_pcornet.html","id":"vc-input-pcornet","dir":"Reference","previous_headings":"","what":"vc_input_pcornet","title":"Vocabulary Conformance Input File (PCORnet) — vc_input_pcornet","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept acceptable_vocabularies comma-separated string acceptable vocabulary values (ex: \"RxNorm, RxNorm Extension\") concept_field *_concept_id field concepts evaluated (ex: rxnorm_cui, raw_rxnorm_cui) filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: certain drugs different vocabulary requirements others)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_omop.html","id":null,"dir":"Reference","previous_headings":"","what":"Valueset Conformance Input File (OMOP) — vs_input_omop","title":"Valueset Conformance Input File (OMOP) — vs_input_omop","text":"sample version OMOP compliant input file Valueset Conformance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_omop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valueset Conformance Input File (OMOP) — vs_input_omop","text":"","code":"vs_input_omop"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_omop.html","id":"vs-input-omop","dir":"Reference","previous_headings":"","what":"vs_input_omop","title":"Valueset Conformance Input File (OMOP) — vs_input_omop","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept valueset_name name CSV file (stored pre-defined file subdirectory) defining acceptable values valueset concept_field *_concept_id field concepts make valueset (ex: race_concept_id, ethnicity_concept_id) filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want evaluate valueset prescription drugs)","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_pcornet.html","id":null,"dir":"Reference","previous_headings":"","what":"Valueset Conformance Input File (PCORnet) — vs_input_pcornet","title":"Valueset Conformance Input File (PCORnet) — vs_input_pcornet","text":"sample version PCORnet compliant input file Valueset Conformance data quality module. exact file also included CSV package user wishes use , structure can copied produce custom list checks.","code":""},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_pcornet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Valueset Conformance Input File (PCORnet) — vs_input_pcornet","text":"","code":"vs_input_pcornet"},{"path":[]},{"path":"https://pedsnet.github.io/ndq/reference/vs_input_pcornet.html","id":"vs-input-pcornet","dir":"Reference","previous_headings":"","what":"vs_input_pcornet","title":"Valueset Conformance Input File (PCORnet) — vs_input_pcornet","text":"dataframe CSV file 6 columns check_id short string \"code\" used identify specific check (ex: de, de_rx) schema schema data kept. Use cdm use pre-configured cdm_schema, result use preconfigured results_schema, input exact name schema. table name CDM pre-computed results table relevant data kept valueset_name name CSV file (stored pre-defined file subdirectory) defining acceptable values valueset concept_field *_concept_id field concepts make valueset (ex: race, hispanic) vocabulary_field Typically relevant diagnoses procedures, field code vocabulary kept (.e. dx_type, px_type) filter_logic OPTIONAL logic applied provided table order tailor tables desired check assessment (ex: want evaluate valueset billed conditions)","code":""},{"path":"https://pedsnet.github.io/ndq/news/index.html","id":"ndq-development-version","dir":"Changelog","previous_headings":"","what":"ndq (development version)","title":"ndq (development version)","text":"Initial CRAN submission.","code":""}]
